"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractInstantiationError = exports.ContractNoFromAddressDefinedError = exports.ContractNoAddressDefinedError = exports.ContractMissingDeployDataError = exports.ContractReservedEventError = exports.ContractEventDoesNotExistError = exports.ContractOnceRequiresCallbackError = exports.ContractMissingABIError = exports.ResolverMethodMissingError = void 0;
const error_codes_1 = require("../error_codes");
const web3_error_base_1 = require("../web3_error_base");
class ResolverMethodMissingError extends web3_error_base_1.Web3Error {
    constructor(address, name) {
        super(`The resolver at ${address} does not implement requested method: "${name}".`);
        this.address = address;
        this.name = name;
        this.code = error_codes_1.ERR_CONTRACT_RESOLVER_MISSING;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { address: this.address, name: this.name });
    }
}
exports.ResolverMethodMissingError = ResolverMethodMissingError;
class ContractMissingABIError extends web3_error_base_1.Web3Error {
    constructor() {
        super('You must provide the json interface of the contract when instantiating a contract object.');
        this.code = error_codes_1.ERR_CONTRACT_ABI_MISSING;
    }
}
exports.ContractMissingABIError = ContractMissingABIError;
class ContractOnceRequiresCallbackError extends web3_error_base_1.Web3Error {
    constructor() {
        super('Once requires a callback as the second parameter.');
        this.code = error_codes_1.ERR_CONTRACT_REQUIRED_CALLBACK;
    }
}
exports.ContractOnceRequiresCallbackError = ContractOnceRequiresCallbackError;
class ContractEventDoesNotExistError extends web3_error_base_1.Web3Error {
    constructor(eventName) {
        super(`Event "${eventName}" doesn't exist in this contract.`);
        this.eventName = eventName;
        this.code = error_codes_1.ERR_CONTRACT_EVENT_NOT_EXISTS;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { eventName: this.eventName });
    }
}
exports.ContractEventDoesNotExistError = ContractEventDoesNotExistError;
class ContractReservedEventError extends web3_error_base_1.Web3Error {
    constructor(type) {
        super(`Event "${type}" doesn't exist in this contract.`);
        this.type = type;
        this.code = error_codes_1.ERR_CONTRACT_RESERVED_EVENT;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { type: this.type });
    }
}
exports.ContractReservedEventError = ContractReservedEventError;
class ContractMissingDeployDataError extends web3_error_base_1.Web3Error {
    constructor() {
        super(`No "data" specified in neither the given options, nor the default options.`);
        this.code = error_codes_1.ERR_CONTRACT_MISSING_DEPLOY_DATA;
    }
}
exports.ContractMissingDeployDataError = ContractMissingDeployDataError;
class ContractNoAddressDefinedError extends web3_error_base_1.Web3Error {
    constructor() {
        super("This contract object doesn't have address set yet, please set an address first.");
        this.code = error_codes_1.ERR_CONTRACT_MISSING_ADDRESS;
    }
}
exports.ContractNoAddressDefinedError = ContractNoAddressDefinedError;
class ContractNoFromAddressDefinedError extends web3_error_base_1.Web3Error {
    constructor() {
        super('No "from" address specified in neither the given options, nor the default options.');
        this.code = error_codes_1.ERR_CONTRACT_MISSING_FROM_ADDRESS;
    }
}
exports.ContractNoFromAddressDefinedError = ContractNoFromAddressDefinedError;
class ContractInstantiationError extends web3_error_base_1.Web3Error {
    constructor() {
        super(...arguments);
        this.code = error_codes_1.ERR_CONTRACT_INSTANTIATION;
    }
}
exports.ContractInstantiationError = ContractInstantiationError;
//# sourceMappingURL=contract_errors.js.map