"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidResponseError = exports.ResponseError = void 0;
const web3_error_base_1 = require("../web3_error_base");
const error_codes_1 = require("../error_codes");
const isResponseWithError = (response) => !Array.isArray(response) &&
    response.jsonrpc === '2.0' &&
    !!response &&
    (response.result === undefined || response.result === null) &&
    'error' in response &&
    (typeof response.id === 'number' || typeof response.id === 'string');
const buildErrorMessage = (response) => isResponseWithError(response) ? response.error.message : '';
class ResponseError extends web3_error_base_1.Web3Error {
    constructor(response, message) {
        var _a;
        super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response)
            ? response.map(r => buildErrorMessage(r)).join(',')
            : buildErrorMessage(response)}`);
        this.code = error_codes_1.ERR_RESPONSE;
        if (!message) {
            this.data = Array.isArray(response)
                ? response.map(r => { var _a; return (_a = r.error) === null || _a === void 0 ? void 0 : _a.data; })
                : (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.data;
        }
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { data: this.data });
    }
}
exports.ResponseError = ResponseError;
class InvalidResponseError extends ResponseError {
    constructor(result) {
        super(result);
        if (!this.message || this.message === '') {
            this.message = `Invalid JSON RPC response: ${JSON.stringify(result)}`;
        }
        this.code = error_codes_1.ERR_INVALID_RESPONSE;
    }
}
exports.InvalidResponseError = InvalidResponseError;
//# sourceMappingURL=response_errors.js.map