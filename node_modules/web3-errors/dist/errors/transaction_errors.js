"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionNotFound = exports.UndefinedRawTransactionError = exports.TransactionOutOfGasError = exports.TransactionRevertedWithoutReasonError = exports.ContractCodeNotStoredError = exports.NoContractAddressFoundError = exports.TransactionRevertError = exports.RevertInstructionError = exports.TransactionError = void 0;
const error_codes_1 = require("../error_codes");
const web3_error_base_1 = require("../web3_error_base");
class TransactionError extends web3_error_base_1.Web3Error {
    constructor(message, receipt) {
        super(message);
        this.receipt = receipt;
        this.code = error_codes_1.ERR_TX;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { receipt: this.receipt });
    }
}
exports.TransactionError = TransactionError;
class RevertInstructionError extends web3_error_base_1.Web3Error {
    constructor(reason, signature) {
        super(`Your request got reverted with the following reason string: ${reason}`);
        this.reason = reason;
        this.signature = signature;
        this.code = error_codes_1.ERR_TX_REVERT_INSTRUCTION;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { reason: this.reason, signature: this.signature });
    }
}
exports.RevertInstructionError = RevertInstructionError;
class TransactionRevertError extends web3_error_base_1.Web3Error {
    constructor(reason, signature, receipt) {
        super(`Transaction has been reverted by the EVM:\n ${JSON.stringify(receipt, undefined, 2)}`);
        this.reason = reason;
        this.signature = signature;
        this.receipt = receipt;
        this.code = error_codes_1.ERR_TX_REVERT_TRANSACTION;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { reason: this.reason, signature: this.signature, receipt: this.receipt });
    }
}
exports.TransactionRevertError = TransactionRevertError;
class NoContractAddressFoundError extends TransactionError {
    constructor(receipt) {
        super("The transaction receipt didn't contain a contract address.", receipt);
        this.code = error_codes_1.ERR_TX_NO_CONTRACT_ADDRESS;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { receipt: this.receipt });
    }
}
exports.NoContractAddressFoundError = NoContractAddressFoundError;
class ContractCodeNotStoredError extends TransactionError {
    constructor(receipt) {
        super("The contract code couldn't be stored, please check your gas limit.", receipt);
        this.code = error_codes_1.ERR_TX_CONTRACT_NOT_STORED;
    }
}
exports.ContractCodeNotStoredError = ContractCodeNotStoredError;
class TransactionRevertedWithoutReasonError extends TransactionError {
    constructor(receipt) {
        super(`Transaction has been reverted by the EVM:\n ${JSON.stringify(receipt, undefined, 2)}`, receipt);
        this.code = error_codes_1.ERR_TX_REVERT_WITHOUT_REASON;
    }
}
exports.TransactionRevertedWithoutReasonError = TransactionRevertedWithoutReasonError;
class TransactionOutOfGasError extends TransactionError {
    constructor(receipt) {
        super(`Transaction ran out of gas. Please provide more gas:\n ${JSON.stringify(receipt, undefined, 2)}`, receipt);
        this.code = error_codes_1.ERR_TX_OUT_OF_GAS;
    }
}
exports.TransactionOutOfGasError = TransactionOutOfGasError;
class UndefinedRawTransactionError extends TransactionError {
    constructor() {
        super(`Raw transaction undefined`);
        this.code = error_codes_1.ERR_RAW_TX_UNDEFINED;
    }
}
exports.UndefinedRawTransactionError = UndefinedRawTransactionError;
class TransactionNotFound extends TransactionError {
    constructor() {
        super('Transaction not found');
        this.code = error_codes_1.ERR_TX_NOT_FOUND;
    }
}
exports.TransactionNotFound = TransactionNotFound;
//# sourceMappingURL=transaction_errors.js.map