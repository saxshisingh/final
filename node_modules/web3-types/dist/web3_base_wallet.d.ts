import { HexString } from './primitives_types';
export declare type Web3EncryptedWallet = string;
export interface Web3BaseWalletAccount {
    [key: string]: unknown;
    readonly address: string;
    readonly privateKey: string;
    readonly signTransaction: (tx: Record<string, unknown>) => Promise<{
        readonly messageHash: HexString;
        readonly r: HexString;
        readonly s: HexString;
        readonly v: HexString;
        readonly rawTransaction: HexString;
        readonly transactionHash: HexString;
    }>;
    readonly sign: (data: Record<string, unknown> | string) => {
        readonly messageHash: HexString;
        readonly r: HexString;
        readonly s: HexString;
        readonly v: HexString;
        readonly message?: string;
        readonly signature: HexString;
    };
    readonly encrypt: (password: string, options?: Record<string, unknown>) => Promise<Web3EncryptedWallet>;
}
export interface Web3AccountProvider<T> {
    privateKeyToAccount: (privateKey: string) => T;
    create: () => T;
    decrypt: (keystore: string, password: string, options?: Record<string, unknown>) => Promise<T>;
}
export declare abstract class Web3BaseWallet<T extends Web3BaseWalletAccount> extends Array<T> {
    protected readonly _accountProvider: Web3AccountProvider<T>;
    constructor(accountProvider: Web3AccountProvider<T>);
    abstract create(numberOfAccounts: number): this;
    abstract add(account: T | string): this;
    abstract get(addressOrIndex: string | number): T | undefined;
    abstract remove(addressOrIndex: string | number): boolean;
    abstract clear(): this;
    abstract encrypt(password: string, options?: Record<string, unknown>): Promise<Web3EncryptedWallet[]>;
    abstract decrypt(encryptedWallet: Web3EncryptedWallet[], password: string, options?: Record<string, unknown>): Promise<this>;
    abstract save(password: string, keyName?: string): Promise<boolean | never>;
    abstract load(password: string, keyName?: string): Promise<this | never>;
}
//# sourceMappingURL=web3_base_wallet.d.ts.map